syntax = "proto3";
package bringyour;

import "frame.proto";

option go_package = "bringyour.com/protocol";


message TransferFrame {
    // ulid
    bytes destination_id = 1;
    // ulid
    bytes source_id = 2;
    Frame frame = 3;

    // TODO have the option to use fully encrypt the frame bytes using pke
    // TODO for the initial use case of already encrypted frame data, this is not needed
    // optional bool encrypted = 4;
}


// this is the minimal subset of `TransferFrame` used when making a routing decision
message FilteredTransferFrame {
    // ulid
    bytes destination_id = 1;
    // ulid
    bytes source_id = 2;
}


message Pack {
    // ulid
    bytes message_id = 1;
    uint64 sequence_id = 2;
    // this marks the head message in the sender's sequence
    // it means that any message with an earlier sequence_id won't arrive
    // and is used when a receiver is recreated with zero state
    bool head = 3;

    repeated Frame frames = 4;
}


// ack of a later message means all prior messages have been ackd
message Ack {
    // ulid
    bytes message_id = 1;
}


// this is a connection local message that is sent at the start of each connection to the control platform
// there is no response. the other side will close the connection if no auth
// no auth can happen if the jwt is not valid, or the client_id is not associated with the jwt
// note that association of the client_id to the jwt uses the api (see openapi spec in the api dir)
message ControlAuth {
    bytes by_jwt = 1;
    // ulid
    bytes client_id = 2;
}


enum ProvideMode {
    NETWORK = 0;
    FF = 1;
    PUBLIC = 2;
}


message Provide {
    repeated ProvideKey keys = 1;
}


message ProvideKey {
    ProvideMode mode = 1;
    // used to sign the `StoredContract` bytes
    bytes provide_secret_key = 2;
}


// control message to create a contract
// acks with a CreateContractResult
// source_id cannot equal destination_id
message CreateContract {
    // ulid
    bytes destination_id = 1;
    uint32 transfer_byte_count = 2;
}


enum ContractError {
    NO_PERMISSION = 0;
    INSUFFICIENT_BALANCE = 1;
}


message CreateContractResult {    
    optional ContractError error = 1;
    optional Contract contract = 2;
}


// append this message inline a pack to enable the connection
message Contract {
    // ulid
    bytes stored_contract_bytes = 1;
    // `stored_contract_bytes` signed with the `provider_secret_key`
    bytes stored_contract_hmac = 2;
    ProvideMode provide_mode = 3;
}


message StoredContract {
    bytes contract_id = 1;
    bytes source_id = 2;
    bytes destination_id = 3;
    uint32 transfer_byte_count = 4;
}


// control message
message CloseContract {
    bytes contract_id = 1;
    uint32 acked_byte_count = 2;
    uint32 unacked_byte_count = 3;
}


// peer auditing
// the acl will block contracts between between two parties with bad audits of each other
message PeerAudit {
    // ulid
    bytes peer_id = 1;
    // number of seconds in the audit
    uint32 duration = 2;
    bool abuse = 3;
    uint32 bad_contract_count = 4;
    uint32 discarded_byte_count = 5;
    uint32 discarded_count = 6;
    uint32 bad_message_byte_count = 7;
    uint32 bad_message_count = 8;
    uint32 send_byte_count = 9;
    uint32 send_count = 10;
    uint32 resend_byte_count = 11;
    uint32 resend_count = 12;
}

